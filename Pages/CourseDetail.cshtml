@page "{courseID:int}"
@model CS3750_PlanetExpressLMS.Pages.CourseDetailModel
@{
    ViewData["Title"] = "CourseDetail";
    Layout = "Shared/_GeneralLayout.cshtml";
}
<div class="container">
    <div class="container">
        <main role="main" class="pb-3">
            @if (Model.user.IsInstructor)
            {
                <h1 class="page-title">Course Detail (Instructor)</h1>
                <hr />
            }
            else
            {
                <h1 class="page-title">Course Detail (Student)</h1>
            }
            <div class="grid-coursedetail-item">
                <h1>@Model.course.CourseName</h1>
                <div>@Model.course.Department @Model.course.CourseNumber</div>
                <div>@Model.course.CreditHours Credit Hours</div>
                <div>@Model.course.CourseLocation</div>
                <div>@Model.course.Days</div>
                <div>@Model.course.StartTime.ToShortTimeString() - @Model.course.EndTime.ToShortTimeString()</div>
                @*Display current grade*@
                @if(Model.totalPointsPossible > 0)
                {
                    <div>
                        Current Grade: @Model.letterGrade (@Model.percentGrade%)
                    </div>
                }
            </div>
     </div>
     @if(!Model.user.IsInstructor)
     {
     if(Model.enrollment.CumulativeGrade != null)
        {
            <div class="container">
                <div id="chart_div"></div>
            </div>
        }
     }
    <div class="container">
            <div class="grid-coursedetail-item">
                <h1>Assignments</h1>
                @if (Model.user.IsInstructor)
            {
                @*Create a new assignment*@
                <button type="button" class="collapsible"><h6><b>+</b>Create Assignment</h6></button>
                <div class="content">
                    <form method="post" asp-route-userID=@Model.user.ID asp-route-courseId=@Model.course.ID>
                        <div class="form-group">
                            <label asp-for="assignment.Name" class="control-label"></label>
                            <input asp-for="assignment.Name" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label asp-for="assignment.SubmissionType" class="control-label"></label>
                            <br />
                            <select asp-for="assignment.SubmissionType" class="control-label">
                                <option value="FILE">File Upload</option>
                                <option value="TEXT">Text Box</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label asp-for="assignment.PointsPossible" class="control-label"></label>
                            <input asp-for="assignment.PointsPossible" class="form-control" />
                        </div>
                        <div class="form-group">
                            <label asp-for="assignment.OpenDateTime" class="control-label"></label>
                            <input asp-for="assignment.OpenDateTime" class="form-control" value="@DateTime.Now"/>
                        </div>
                        <div class="form-group">
                            <label asp-for="assignment.CloseDateTime" class="control-label"></label>
                            <input asp-for="assignment.CloseDateTime" class="form-control" value="@DateTime.Now"/>
                        </div>
                        <div class="form-group">
                            <label asp-for="assignment.Description" class="control-label"></label>
                            <textarea asp-for="assignment.Description" class="form-control"></textarea>
                        </div>
                        <div>
                            <input type="submit" value="Create" class="btn btn-primary"/>
                        </div>
                    </form>
                </div>
            }
            @if (Model.courseAssignments.Count() != 0)
            {
                @*Display header for assignment list*@
                <div class="grid-container-5col">
                    <div class="grid-item">
                        <b>Name</b>
                    </div>
                    <div class="grid-item">
                        <b>Submission Type</b>
                    </div>
                    <div class="grid-item">
                        <b>Points Possible</b>
                    </div>
                    <div class="grid-item">
                        <b>Start - End</b>
                    </div>
                    <div class="grid-item">
                        <b>@(
                             Model.user.IsInstructor ? "Options" : "Submission"
                             )</b>
                    </div>
                </div>
                @*Display assignment list*@
                @for (int i = 0; i < Model.courseAssignments.Count(); i++)
                {
                    <div class="grid-container-5col">
                        <div class="grid-item">
                            @Html.DisplayFor(ModelItem => Model.courseAssignments.ElementAt(i).Name)
                        </div>
                        <div class="grid-item">
                            @Html.DisplayFor(ModelItem => Model.courseAssignments.ElementAt(i).SubmissionType)
                        </div>
                        <div class="grid-item">
                            @Html.DisplayFor(ModelItem => Model.courseAssignments.ElementAt(i).PointsPossible)
                        </div>
                        <div class="grid-item">
                            @Html.DisplayFor(ModelItem => Model.courseAssignments.ElementAt(i).OpenDateTime) - @Html.DisplayFor(ModelItem => Model.courseAssignments.ElementAt(i).CloseDateTime)
                        </div>
                        @*Display edit/delete buttons if user is an instructor*@
                        @if (Model.user.IsInstructor)
                        {
                            <div class="grid-item">
                                <a class="btn btn-primary" asp-page="editassignment/" asp-route-assignmentId="@Model.courseAssignments.ElementAt(i).ID">Edit</a>
                                <form method="post" asp-page-handler="Delete" asp-route-assignmentId="@Model.courseAssignments.ElementAt(i).ID" asp-route-courseId="@Model.course.ID">
                                    <input type="submit" class="btn btn-delete" value="Delete"/>
                                </form>
                                <a class="btn btn-primary" asp-page="ViewSubmissions/" asp-route-assignmentId="@Model.courseAssignments.ElementAt(i).ID">Submissions</a>
                             </div>
                        }
                        else
                        {
                            @*Display assignment submission option if the user is a student*@
                            @*If the assignment has already been submitted, display a 'resubmit' option*@
                            @*If the assignment has been graded, display the grade*@
                            if (Model.assignmentHasSubmission[i])
                            {
                                <div class="grid-item">
                                    <p>@((Model.courseSubmissions[i].Grade == null) ? "" : "Grade: " + Model.courseSubmissions[i].Grade + " / " + Model.courseAssignments[i].PointsPossible)</p>
                                    <a class="btn btn-secondary" asp-page="submitassignment/" asp-route-userId="@Model.user.ID" asp-route-assignmentID="@Model.courseAssignments.ElementAt(i).ID">Re-submit</a>
                                </div>
                            }
                            else
                            {
                                <div class="grid-item">
                                    <a class="btn btn-primary" asp-page="submitassignment/" asp-route-userId="@Model.user.ID" asp-route-assignmentId="@Model.courseAssignments.ElementAt(i).ID">Submit</a>
                            </div>
                        }
                    }
                        </div>
                }
            }
            </div>

        </main>
    </div>
</div>
        @section Scripts {
            @{
                await Html.RenderPartialAsync("_ValidationScriptsPartial");
            }
        }

@section ChartScripts {
        <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

      // Load the Visualization API and the corechart package.
      google.charts.load('current', {'packages':['corechart']});


      // Set a callback to run when the Google Visualization API is loaded.
      //Any additional charts will be created in additional functions.
      //Make sure to call the functions in this section
      google.charts.setOnLoadCallback(drawChart);

      // Callback that creates and populates a data table,
      // instantiates the histogram, passes in the data and
      // draws it.
      function drawChart() {

        // Create the data table.
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Student');
        data.addColumn('number', 'Grade');
          @foreach(var e in Model.courseEnrollments)
          {
              if(e.CumulativeGrade != null)
              {
                  if(e.UserID == Model.user.ID)
                  {
                      @:data.addRow(['@Model.user.FirstName' + ' ' + '@Model.user.LastName', @e.CumulativeGrade]);
                  }
                  else
                  {
                      @:data.addRow(['Student', @e.CumulativeGrade]);
                  }
              }
          }

       //Highlight the square representing the current user's submission
       //Sort the data table
       data.sort([{ column: 1 }]);
       //Find row to highlight
       var highlightRows = data.getFilteredRows([{
       column: 0,
       value: '@Model.user.FirstName' + ' ' + '@Model.user.LastName'
       }]);

        // Instantiate and draw our chart, passing in some options.
        var options = {
          colors: ['#3366cc', '#dc3912'], // <-- 1st color used to identify, 2nd to highlight
          title: 'Student Performance',
          legend: { position: 'none' },
          hAxis: {
            ticks: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100]
           },
           histogram: {
               bucketSize: 10
           }
        };

        var container = document.getElementById('chart_div');
        var chart = new google.visualization.Histogram(container);

      //Stack overflow magic right here
      google.visualization.events.addListener(chart, 'ready', function () {
            var observer = new MutationObserver(function () {
                var index = 0;
                Array.prototype.forEach.call(container.getElementsByTagName('rect'), function (rect) {
                    if (options.colors.indexOf(rect.getAttribute('fill')) > -1) {
                        if (highlightRows.indexOf(index) > -1) {
                            rect.setAttribute('fill', options.colors[1]);
                        }
                        index++;
                    }
                });
            });
            observer.observe(container, {
                childList: true,
                subtree: true
            });
      });

        chart.draw(data, options);
      }


    </script>
}



