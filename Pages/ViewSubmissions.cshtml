@page "{assignmentId:int}"
@model CS3750_PlanetExpressLMS.Pages.ViewSubmissionsModel
@{
    ViewData["Title"] = "Submissions";
    Layout = "Shared/_GeneralLayout.cshtml";
}
<h2 class="page-title">
        <a asp-page="coursedetail/" asp-route-courseID="@Model.Assignment.CourseID">Course Details</a> >> Submissions for: @Model.Assignment.Name
    </h2>
    <hr />
@if (Model.Submissions.Count != 0)
{
    if (Model.AnySubmissionsGraded)
    {
        <!--Div that will hold the pie charts-->
        <div id="chart_div"></div>
        <div><br /></div>
    }
    @*Headers for submissions table*@
    <div class="grid-title-background grid-submissions">
        <div class="grid-item">
        <b>Student</b>
    </div>
    <div class="grid-item">
        <b>Time Submitted</b>
    </div>
    <div class="grid-item">
        <b>Current Grade</b>
    </div>
    <div class="grid-item">

    </div>
    </div>
}

else
{
    <h2>There are no submissions for this assignment yet!</h2>
    <h3>Hopefully some will appear soon.</h3>
}

@for(int i = 0; i < Model.Submissions.Count; i++)
{
    <div class="grid-item-background grid-submissions">
        <h4 class="grid-item">
            @Model.UsersWithSubmissions[i].FirstName @Model.UsersWithSubmissions[i].LastName
        </h4>
        @*Displays in red text and appends "(late)" to the submission time if the submission is late*@
        <h6 class="grid-item">
            <span class="@(Model.SubmissionIsLate[i] ? "text-danger" : "")">@Model.Submissions[i].SubmissionTime </span>
            @if(Model.SubmissionIsLate[i])
            {
                <span class="text-danger">(late)</span>
            }
        </h6>
        <h6 class="grid-item">
            @Model.Submissions[i].Grade / @Model.Assignment.PointsPossible
        </h6>
        @if(Model.Submissions[i].Grade == null)
        {
            <div class="grid-item">
                <a class="btn btn-primary" asp-page="gradesubmission/" asp-route-userId="@Model.user.ID" asp-route-submissionId="@Model.Submissions[i].ID">Grade</a>
            </div>
        }
        else
        {
        <h6 class="grid-item">
            <a class="btn btn-secondary" asp-page="gradesubmission/" asp-route-userId="@Model.user.ID" asp-route-submissionId="@Model.Submissions[i].ID">Re-grade</a>
        </h6>
        }
    </div>
}


@section ChartScripts {
    <!--Load the AJAX API-->
    <script type="text/javascript" src="https://www.gstatic.com/charts/loader.js"></script>
    <script type="text/javascript">

      // Load the Visualization API and the corechart package.
      google.charts.load('current', {'packages':['corechart']});



      // Set a callback to run when the Google Visualization API is loaded.
      //Any additional charts will be created in additional functions.
      //Make sure to call the functions in this section
      google.charts.setOnLoadCallback(drawChart);
      google.charts.setOnLoadCallback(drawUserChart);




      // Callback that creates and populates a data table,
      // instantiates the pie chart, passes in the data and
      // draws it.
      function drawChart() {

        // Create the data table.
        var data = new google.visualization.DataTable();
        data.addColumn('string', 'Grade');
        data.addColumn('number', 'Number of Students');
        data.addRows([
          ['A', @Model.Grades[0]],
          ['B', @Model.Grades[1]],
          ['C', @Model.Grades[2]],
          ['D', @Model.Grades[3]],
          ['F', @Model.Grades[4]]
        ]);

        // Set chart options
          var options = {
              'title': 'Student Performance: Assignment',
              'width': 400,
              'height': 300,
              'colors': ['#32a852', '#4d9aff', '#f7e40f', '#f7ac2a', '#f72a2a'],
              'pieHole': 0.4
          };

        // Instantiate and draw our chart, passing in some options.
        var chart = new google.visualization.PieChart(document.getElementById('chart_div'));
        chart.draw(data, options);
      }


    </script>
}